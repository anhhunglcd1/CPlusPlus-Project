#include "login_system.h"
#include <iostream>
#include <limits>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <cctype>
using namespace std;

// Ghi log thay đổi cần xác nhận OTP vào file pending_change.txt
// Input: username - tên user; otp - mã OTP; type - loại thay đổi ("FullName" hoặc "Password")
void logPendingChange(const string& username, const string& otp, const string& type) {
    ofstream fout("pending_change.txt", ios::app); // Mở file ghi tiếp (không xóa cũ)
    time_t now = time(nullptr);
    fout << "Username: " << username << "\n";
    fout << "OTP: " << otp << "\n";
    fout << "Change: " << type << "\n";
    fout << "Time: " << nowToString(now) << "\n";
    fout << "-----------\n";
    fout.close();
}

// Đặt lịch đổi tên: chỉ sinh OTP mới nếu user chưa có OTP chờ xác nhận
// Đổi tên sẽ có hiệu lực sau khi user xác nhận OTP ở lần đăng nhập sau
void scheduleFullNameChange(User* u, vector<User>& users) {
    cout << "Enter new full name: ";
    string nm; getline(cin, nm);
    u->pendingFullName = nm; // Lưu lại tên mới vào trường pending
    if (u->otp.empty())      // Nếu chưa có OTP đang chờ thì sinh mới
        u->otp = genOTP();
    saveUsers(users);        // Lưu lại trạng thái mới (pending)
    logPendingChange(u->username, u->otp, "FullName"); // Ghi log chờ xác nhận vào file
    cout << "Change scheduled! User must confirm with OTP at next login.\n";
}

// Đặt lịch đổi mật khẩu: chỉ sinh OTP mới nếu user chưa có OTP chờ xác nhận
// Đổi mật khẩu sẽ có hiệu lực sau khi user xác nhận OTP ở lần đăng nhập sau
void schedulePasswordChange(User* u, vector<User>& users) {
    cout << "Enter new password: ";
    string np = inputHiddenPassword(); // Nhập mật khẩu mới dạng ẩn
    u->pendingPasswordHash = to_string(hashPassword(np)); // Lưu mã băm của mật khẩu mới vào pending
    if (u->otp.empty())    // Nếu chưa có OTP đang chờ thì sinh mới
        u->otp = genOTP();
    saveUsers(users);      // Lưu lại trạng thái mới (pending)
    logPendingChange(u->username, u->otp, "Password"); // Ghi log chờ xác nhận vào file
    cout << "Change scheduled! User must confirm with OTP at next login.\n";
}

// Đổi mật khẩu (người dùng tự thao tác, phải xác nhận OTP)
// Sau khi đổi, xóa trạng thái mật khẩu tự sinh (isAutoGenerated = false)
void changePassword(User* u, vector<User>& users) {
    if (!requireOTP(u->username)) return; // Yêu cầu xác nhận OTP
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Loại bỏ ký tự thừa trong buffer
    cout << "New password: ";
    string np = inputHiddenPassword();
    u->passwordHash = hashPassword(np);   // Băm và lưu mật khẩu mới
    u->isAutoGenerated = false;           // Đánh dấu user đã tự đổi mật khẩu
    saveUsers(users);                     // Lưu lại file
    cout << "Password changed successfully.\n";
}

// Đổi tên (người dùng tự thao tác, phải xác nhận OTP)
void updateFullName(User* u, vector<User>& users) {
    if (!requireOTP(u->username)) return; // Yêu cầu xác nhận OTP
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "New full name: ";
    string nm; getline(cin, nm);
    u->fullName = nm; // Lưu lại tên mới
    saveUsers(users);
    cout << "Full name updated successfully.\n";
}

// Hiển thị thông tin tài khoản của user (profile)
void viewProfile(User* u) {
    cout << "--- Profile ---\n"
        << "Username   : " << u->username << "\n"
        << "Full name  : " << u->fullName << "\n"
        << "Wallet ID  : " << u->wallet.id << "\n"
        << "Balance    : " << (u->isAdmin ? "Unlimited" : to_string(u->wallet.balance)) << "\n";
}

// Hiển thị lịch sử giao dịch của ví người dùng
void viewHistory(User* u) {
    cout << "--- Transaction History ---\n";
    for (auto& tx : u->wallet.history) {
        // Hiển thị thời gian, ví gửi -> ví nhận, số điểm giao dịch
        cout << nowToString(tx.timestamp) << " | "
            << tx.fromWallet << " -> " << tx.toWallet << " : " << tx.amount << "\n";
    }
}

// Chuyển điểm từ user hiện tại sang một user khác
#include <algorithm> // Cho transform

void transferPoints(User* u, vector<User>& users) {
    bool hasRecipient = false;
    for (auto& x : users) {
        if (x.username != u->username) {
            hasRecipient = true;
            break;
        }
    }
    if (!hasRecipient) {
        cout << "No available recipients. Transfer aborted.\n";
        return;
    }
    if (!u->isAdmin) {
        cout << "\nYour current balance: " << u->wallet.balance << " points\n";
    }
    cout << "--- Available Recipients ---\n";
    for (auto& x : users) {
        if (x.username == u->username) continue;       // không in chính user đang login
        cout << " >  " << x.username
            << "  (Wallet ID: " << x.wallet.id << ")\n";
    }
    cout << "---------------------------\n";
    cout << "Destination wallet ID: ";
    string dest;
    cin >> dest;
    transform(dest.begin(), dest.end(), dest.begin(), ::tolower);

    User* v = nullptr;
    // Tìm user có wallet.id trùng với ví nhận (không phân biệt hoa/thường)
    for (auto& x : users) {
        string candidateId = x.wallet.id;
        transform(candidateId.begin(), candidateId.end(), candidateId.begin(), ::tolower);
        if (candidateId == dest) {
            v = &x;
            break;
        }
    }
    if (!v) {
        cout << "Wallet not found.\n";
        return;
    }
    cout << "Amount to transfer: ";
    int amt = 0;
    if (!(cin >> amt)) {
        cout << "Invalid input. Must be a number.\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return;
    }
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    // Nếu không phải admin, kiểm tra balance có đủ không
    if (!u->isAdmin && u->wallet.balance < amt) {
        cout << "Insufficient balance.\n";
        return;
    }
    if (!requireOTP(u->username)) return;

    // 6) Chia amt thành fromPool và fromNonPool
    int availablePool = u->wallet.poolBalance;
    int fromPool = min(availablePool, amt);    // ưu tiên lấy origin-point
    int fromNonPool = amt - fromPool;
    if (!u->isAdmin) {
        u->wallet.balance -= amt;
    }
    // Trừ riêng poolBalance đúng bằng fromPool
    u->wallet.poolBalance -= fromPool;

    // 8) Cộng điểm cho ví đích
    v->wallet.balance += amt;
    v->wallet.poolBalance += fromPool; // chỉ tăng phần origin-point

    // Ghi transaction (đánh dấu fromPool)
    time_t now = time(nullptr);
    Transaction txA{ u->wallet.id, v->wallet.id, amt, (fromPool > 0), now };
    Transaction txB{ u->wallet.id, v->wallet.id, amt, (fromPool > 0), now };
    u->wallet.history.push_back(txA);
    v->wallet.history.push_back(txB);

    // Lưu lại mọi thay đổi
    saveUsers(users);
    cout << "Transfer successful.\n";
}

