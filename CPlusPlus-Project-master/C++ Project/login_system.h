#pragma once
#ifndef LOGIN_SYSTEM_H
#define LOGIN_SYSTEM_H

#include <string>
#include <vector>
#include <ctime>
using namespace std;

extern int rewardPool;                 // <<< ADD >>> số điểm còn lại trong reward pool
int loadRewardPool();                  // <<< ADD >>> load rewardPool từ file
void saveRewardPool(int pool);         // <<< ADD >>> lưu rewardPool vào file

// Cấu trúc lưu thông tin một giao dịch chuyển điểm giữa các ví
struct Transaction {
    string fromWallet;        // ID ví gửi điểm
    string toWallet;          // ID ví nhận điểm
    int amount = 0;           // Số điểm giao dịch
    bool fromPool = false;    // true nếu phần này lấy từ pool-origin, false nếu non-pool
    time_t timestamp = 0;     // Thời gian thực hiện giao dịch (kiểu time_t)
};

// Cấu trúc lưu thông tin ví của một người dùng
struct Wallet {
    string id;                       // Mã định danh ví (duy nhất)
    int balance = 0;                 // Số dư ví
    int poolBalance = 0;             // Chỉ số điểm origin từ pool còn lại
    vector<Transaction> history;     // Lịch sử các giao dịch
};

// Cấu trúc lưu thông tin một người dùng
struct User {
    string username;                 // Tên đăng nhập (duy nhất)
    size_t passwordHash = 0;         // Mã băm (hash) của mật khẩu
    string fullName;                 // Họ tên người dùng
    bool isAdmin = false;            // Cờ xác định tài khoản admin
    bool isAutoGenerated = false;    // Đánh dấu mật khẩu là tự sinh (bắt buộc đổi lần đầu)
    Wallet wallet;                   // Thông tin ví gắn với người dùng này
    string otp;                      // Mã OTP để xác nhận thay đổi thông tin (nếu có)
    string pendingFullName;          // Họ tên mới đang chờ xác nhận qua OTP
    string pendingPasswordHash;      // Mã băm mật khẩu mới đang chờ xác nhận OTP
};

extern int rewardPool;

// ------------------- KHAI BÁO HÀM XỬ LÝ DỮ LIỆU ---------------------

string genRandomPassword(int length = 8);          // Sinh mật khẩu ngẫu nhiên, trả về chuỗi, độ dài mặc định 8 ký tự
string genOTP(int digits = 6);                     // Sinh mã OTP ngẫu nhiên, trả về chuỗi, mặc định 6 chữ số
size_t hashPassword(const string& pwd);            // Hàm băm mật khẩu, trả về giá trị số nguyên size_t
string nowToString(time_t t);                      // Chuyển thời gian kiểu time_t thành chuỗi ngày giờ (YYYY-MM-DD HH:MM:SS)
string inputHiddenPassword();                      // Nhập mật khẩu ẩn, thay ký tự bằng dấu * trên màn hình

void backupData();                                // Sao lưu dữ liệu người dùng sang file dự phòng
vector<User> loadUsers();                         // Đọc dữ liệu người dùng từ file lưu trữ
void saveUsers(const vector<User>& users);        // Ghi dữ liệu tất cả người dùng ra file
void initPendingChangeFile();                     // Tạo file lưu các thay đổi chờ xác nhận (nếu chưa có)

// ------------------- KHAI BÁO HÀM QUẢN LÝ NGƯỜI DÙNG ---------------------

User* findUser(vector<User>& users, const string& username);          // Tìm user theo username, trả về con trỏ User hoặc nullptr
bool registerUser(vector<User>& users, bool byAdmin = false);         // Đăng ký user mới, tham số byAdmin: true nếu admin tạo hộ
bool deleteUser(vector<User>& users, const string& username);         // Xóa user khỏi hệ thống (theo username)
bool requireOTP(const string& username);                              // Bắt buộc nhập OTP xác nhận khi thực hiện thao tác quan trọng
User* login(vector<User>& users);                                     // Đăng nhập, trả về con trỏ User nếu thành công

void scheduleFullNameChange(User* u, vector<User>& users);            // Đặt lịch đổi tên, lưu tạm chờ xác nhận OTP
void schedulePasswordChange(User* u, vector<User>& users);            // Đặt lịch đổi mật khẩu, lưu tạm chờ xác nhận OTP
void changePassword(User* u, vector<User>& users);                    // Đổi mật khẩu trực tiếp (tự đổi)
void viewProfile(User* u);                                            // Xem thông tin cá nhân
void updateFullName(User* u, vector<User>& users);                    // Đổi tên trực tiếp (tự đổi)
void viewHistory(User* u);                                            // Xem lịch sử giao dịch của ví
void transferPoints(User* u, vector<User>& users);                    // Chuyển điểm từ ví này sang ví khác
void userMenu(User* u, vector<User>& users);                          // Menu chức năng cho người dùng thường
void adminMenu(User* u, vector<User>& users);                         // Menu chức năng cho admin
void clearScreen();                                                   // Xóa màn hình console (clear screen)

// Ghi log pending change (lưu thông tin thay đổi cần xác nhận OTP vào file)
void logPendingChange(const std::string& username, const std::string& otp, const std::string& type);
// Xóa thông tin pending change đã xác nhận (sau khi nhập OTP đúng)
void removePendingChange(const std::string& username, const std::string& otp);

#endif // LOGIN_SYSTEM_H
