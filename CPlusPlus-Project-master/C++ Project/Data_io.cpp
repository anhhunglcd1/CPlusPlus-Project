#include "login_system.h"
#include <fstream>
#include <iostream>
using namespace std;

static const string POOL_FILE = "reward_pool.dat";

// Nếu file chưa tồn tại hoặc đọc lỗi, trả về 30 (mặc định)
int loadRewardPool() {
    ifstream fin(POOL_FILE);
    if (!fin.is_open()) return 30;    // Lần đầu chạy, pool = 30
    int val;
    fin >> val;
    if (!fin) return 30;
    return val;
}

// Ghi đè (trunc) lên file để lưu giá trị mới của rewardPool
void saveRewardPool(int pool) {
    ofstream fout(POOL_FILE, ios::trunc);
    fout << pool;
    fout.close();
}

const string DATA_FILE = "users.dat";     // Tên file lưu dữ liệu người dùng
const string BACKUP_FILE = "users.bak";   // Tên file sao lưu dự phòng


// Hàm sao lưu dữ liệu người dùng hiện tại sang file dự phòng (backup)
// Copy toàn bộ nội dung file DATA_FILE sang BACKUP_FILE
void backupData() {
    ifstream src(DATA_FILE);      // Mở file nguồn (dữ liệu gốc)
    ofstream dst(BACKUP_FILE);    // Mở file đích (file backup)
    if (src && dst) dst << src.rdbuf(); // Nếu cả hai file mở thành công, copy toàn bộ dữ liệu
}

// Đọc toàn bộ danh sách người dùng từ file dữ liệu DATA_FILE
// Trả về vector<User> chứa tất cả người dùng
vector<User> loadUsers() {
    vector<User> users;
    ifstream fin(DATA_FILE);    // Mở file dữ liệu để đọc
    if (!fin) return users;     // Nếu không mở được file thì trả về danh sách rỗng

    size_t n; fin >> n;         // Đọc số lượng người dùng
    users.reserve(n);           // Dự phòng bộ nhớ cho vector
    for (size_t i = 0; i < n; ++i) {
        User u;
        size_t m;
        // Đọc lần lượt các thuộc tính cơ bản của user
        fin >> u.username
            >> u.passwordHash
            >> u.fullName
            >> u.isAdmin
            >> u.isAutoGenerated
            >> u.wallet.id
            >> u.wallet.balance
            >> u.wallet.poolBalance;

        string otp, pendingFullName, pendingPasswordHash;
        fin >> otp >> pendingFullName >> pendingPasswordHash;

        u.otp = (otp == "0" ? "" : otp);
        u.pendingFullName = (pendingFullName == "0" ? "" : pendingFullName);
        u.pendingPasswordHash = (pendingPasswordHash == "0" ? "" : pendingPasswordHash);

        fin >> m;                       // Đọc số lượng giao dịch ví của user
        u.wallet.history.reserve(m);    // Dự phòng vector lịch sử giao dịch
        for (size_t j = 0; j < m; ++j) {
            Transaction tx;
            fin >> tx.fromWallet >> tx.toWallet >> tx.amount >> tx.fromPool >> tx.timestamp; // Đọc thông tin từng giao dịch
            u.wallet.history.push_back(tx);                                   // Lưu vào vector history
        }
        users.push_back(move(u));       // Thêm user đã đọc vào danh sách users
    }
    return users;
}

void saveUsers(const vector<User>& users) {  
    ofstream fout(DATA_FILE);                   // Mở file để ghi  
    fout << users.size() << '\n';               // Ghi số lượng user đầu file  
    for (auto& u : users) {  
        // Ghi lần lượt các trường thông tin user, các trường string rỗng sẽ ghi "0"  
        fout << u.username << " "  
            << u.passwordHash << " "  
            << u.fullName << " "  
            << u.isAdmin << " "  
            << u.isAutoGenerated << " "  
            << u.wallet.id << " "  
            << u.wallet.balance << " "  
            << u.wallet.poolBalance << " "  
            << (u.otp.empty() ? "0" : u.otp) << " "  
            << (u.pendingFullName.empty() ? "0" : u.pendingFullName) << " "  
            << (u.pendingPasswordHash.empty() ? "0" : u.pendingPasswordHash) << "\n";  
        fout << u.wallet.history.size() << '\n'; // Ghi số lượng giao dịch ví  
        for (auto& tx : u.wallet.history)  
            // Ghi thông tin từng giao dịch trên 1 dòng  
            fout << tx.fromWallet << ' '  
                << tx.toWallet << ' '  
                << tx.amount << ' '  
                << (tx.fromPool ? 1 : 0) << ' '  
                << tx.timestamp << '\n';  
    }  
}

// Khởi tạo file "pending_change.txt" để ghi nhận các thay đổi chờ xác nhận (OTP)
// Nếu file chưa tồn tại sẽ được tạo mới, nếu đã tồn tại thì giữ nguyên nội dung
void initPendingChangeFile() {
    ofstream fout("pending_change.txt", ios::app); // Mở file ở chế độ append (không xóa nội dung cũ)
    fout.close();
}
