#include "login_system.h"
#include <fstream>   // Đọc/ghi file dữ liệu
#include <iostream>  // Xuất thông báo lỗi
#include <limits>    // Dùng numeric_limits cho buffer input
using namespace std;

// ===== Giới hạn tối đa =====
// Tránh trường hợp file dữ liệu bị lỗi hoặc quá nhiều mục
static constexpr size_t MAX_USERS = 1000000;   // Số user tối đa được hỗ trợ
static constexpr size_t MAX_TXNS = 100000;    // Số giao dịch tối đa cho mỗi user

// ===== Định nghĩa file lưu trữ =====
const string DATA_FILE = "users.dat";  // File lưu thông tin người dùng chính
const string BACKUP_FILE = "users.bak";  // File sao lưu an toàn

// ===== Hàm sao lưu dữ liệu =====
// Copy toàn bộ nội dung DATA_FILE sang BACKUP_FILE
void backupData() {
    ifstream src(DATA_FILE);        // Mở file gốc để đọc
    ofstream dst(BACKUP_FILE);      // Mở file backup để ghi
    if (!src || !dst) {
        // Thông báo nếu không mở được
        cerr << "Failed to open data/backup file for copying.\n";
        return;
    }
    // Sao chép nội dung
    dst << src.rdbuf();
}

// ===== Hàm tải danh sách người dùng =====
vector<User> loadUsers() {
    vector<User> users;
    ifstream fin(DATA_FILE);  // Mở file dữ liệu
    if (!fin) {
        // Nếu file không tồn tại, trả về vector rỗng
        return users;
    }

    size_t n = 0;
    // Đọc số lượng user đầu tiên
    if (!(fin >> n) || n > MAX_USERS) {
        cerr << "Error: invalid user count.\n";
        return users;
    }
    users.reserve(n);  // Dự trữ bộ nhớ cho performance

    // Đọc từng bản ghi User
    for (size_t i = 0; i < n; ++i) {
        User u;
        size_t m = 0;  // Số giao dịch lịch sử
        // Đọc thông tin cơ bản của user
        if (!(fin >> u.username
            >> u.passwordHash
            >> u.fullName
            >> u.isAdmin
            >> u.isAutoGenerated
            >> u.wallet.id
            >> u.wallet.balance)) {
            cerr << "Error: malformed user entry at index " << i << ".\n";
            break;
        }
        // Đọc số lượng giao dịch lịch sử
        if (!(fin >> m) || m > MAX_TXNS) {
            // Nếu dữ liệu m không hợp lệ, bỏ qua lịch sử
            m = 0;
        }
        u.wallet.history.reserve(m);
        // Đọc chi tiết từng Transaction
        for (size_t j = 0; j < m; ++j) {
            Transaction tx;
            if (!(fin >> tx.fromWallet
                >> tx.toWallet
                >> tx.amount
                >> tx.timestamp)) {
                cerr << "Warning: malformed txn #" << j
                    << " for user " << u.username << ".\n";
                break;
            }
            u.wallet.history.push_back(move(tx));
        }
        users.push_back(move(u));
    }
    return users;
}

// ===== Hàm lưu danh sách người dùng =====
void saveUsers(const vector<User>& users) {
    ofstream fout(DATA_FILE);  // Mở file ghi đè dữ liệu
    if (!fout) {
        cerr << "Cannot open data file for writing.\n";
        return;
    }
    // Ghi số lượng người dùng trước tiên
    fout << users.size() << "\n";
    // Ghi từng user và lịch sử giao dịch
    for (const auto& u : users) {
        // Ghi thông tin cơ bản
        fout << u.username << " "
            << u.passwordHash << " "
            << u.fullName << " "
            << u.isAdmin << " "
            << u.isAutoGenerated << " "
            << u.wallet.id << " "
            << u.wallet.balance << "\n";
        // Ghi số giao dịch trong lịch sử
        fout << u.wallet.history.size() << "\n";
        // Ghi chi tiết từng giao dịch
        for (const auto& tx : u.wallet.history) {
            fout << tx.fromWallet << " "
                << tx.toWallet << " "
                << tx.amount << " "
                << tx.timestamp << "\n";
        }
    }
}
