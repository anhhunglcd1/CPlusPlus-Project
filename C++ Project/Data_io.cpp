#include "login_system.h"
#include <fstream>
#include <iostream>
using namespace std;

static constexpr size_t MAX_USERS = 1000000;
static constexpr size_t MAX_TXNS = 100000;
const string DATA_FILE = "users.dat";
const string BACKUP_FILE = "users.bak";

void backupData() {
    ifstream src(DATA_FILE);
    ofstream dst(BACKUP_FILE);
    if (src && dst) dst << src.rdbuf();
}

vector<User> loadUsers() {
    vector<User> users;
    ifstream fin(DATA_FILE);
    if (!fin) return users;

    size_t n; fin >> n;
    users.reserve(n);
    for (size_t i = 0; i < n; ++i) {
        User u;
        size_t m;
        fin >> u.username
            >> u.passwordHash
            >> u.fullName
            >> u.isAdmin
            >> u.isAutoGenerated
            >> u.wallet.id
            >> u.wallet.balance
            >> u.pendingPasswordHash
            >> u.pendingFullName
            >> u.otp;
        fin >> m;
        u.wallet.history.reserve(m);
        for (size_t j = 0; j < m; ++j) {
            Transaction tx;
            fin >> tx.fromWallet >> tx.toWallet >> tx.amount >> tx.timestamp;
            u.wallet.history.push_back(tx);
        }
        users.push_back(move(u));
    }
    return users;
}

void saveUsers(const vector<User>& users) {
    ofstream fout(DATA_FILE);
    fout << users.size() << '\n';
    for (auto& u : users) {
        fout << u.username << ' '
            << u.passwordHash << ' '
            << u.fullName << ' '
            << u.isAdmin << ' '
            << u.isAutoGenerated << ' '
            << u.wallet.id << ' '
            << u.wallet.balance << ' '
            << u.pendingPasswordHash << ' '
            << u.pendingFullName << ' '
            << u.otp << '\n';
        fout << u.wallet.history.size() << '\n';
        for (auto& tx : u.wallet.history)
            fout << tx.fromWallet << ' ' << tx.toWallet << ' ' << tx.amount << ' ' << tx.timestamp << '\n';
    }
}
