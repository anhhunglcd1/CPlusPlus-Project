#include "login_system.h"
#include <fstream>
#include <iostream>
using namespace std;

// -----------------------------
// Tên file lưu số điểm pool dùng để thưởng cho user mới
static const string POOL_FILE = "reward_pool.dat";

// ---------------------
// Đọc rewardPool từ file
// ---------------------
// Nếu file chưa có hoặc bị lỗi, trả về 30 (mặc định)
int loadRewardPool() {
    ifstream fin(POOL_FILE);                  // Mở file pool để đọc
    if (!fin.is_open()) return 30;            // Nếu không mở được file (chưa tồn tại), trả về 30 mặc định
    int val;
    fin >> val;                               // Đọc số nguyên từ file (là số điểm hiện tại)
    if (!fin) return 30;                      // Nếu đọc lỗi (ví dụ file rỗng, hoặc lỗi định dạng), trả về 30
    return val;                               // Ngược lại, trả về giá trị đọc được
}

// -----------------------------
// Lưu giá trị rewardPool ra file
// -----------------------------
// File sẽ bị ghi đè hoàn toàn mỗi lần gọi
void saveRewardPool(int pool) {
    ofstream fout(POOL_FILE, ios::trunc);     // Mở file pool để ghi, xóa dữ liệu cũ (truncate)
    fout << pool;                             // Ghi giá trị mới vào file
    fout.close();                             // Đóng file (tự động khi thoát hàm)
}

// ---------------------------------------------
// Tên file chứa thông tin user và file backup dự phòng
const string DATA_FILE = "users.dat";         // File chính chứa thông tin user
const string BACKUP_FILE = "users.bak";       // File backup dự phòng (copy users.dat)

// ---------------------------
// Sao lưu dữ liệu người dùng
// ---------------------------
// Copy toàn bộ nội dung users.dat sang users.bak (dùng làm backup)
void backupData() {
    ifstream src(DATA_FILE);                  // Mở file dữ liệu gốc (chế độ đọc)
    ofstream dst(BACKUP_FILE);                // Mở file backup (chế độ ghi)
    if (src && dst) dst << src.rdbuf();       // Nếu cả hai file mở thành công, copy toàn bộ dữ liệu từ src sang dst
}

// -------------------------------------
// Đọc toàn bộ danh sách user từ file
// -------------------------------------
// Trả về vector<User> (danh sách user hiện có)
// File lưu dạng tuần tự: số lượng user -> thông tin từng user -> số giao dịch -> từng giao dịch
vector<User> loadUsers() {
    vector<User> users;
    ifstream fin(DATA_FILE);                       // Mở file users.dat để đọc
    if (!fin) return users;                        // Nếu lỗi mở file thì trả về vector rỗng

    size_t n; fin >> n;                            // Đọc số lượng user đầu file
    users.reserve(n);                              // Dự phòng bộ nhớ cho vector users
    for (size_t i = 0; i < n; ++i) {
        User u;
        size_t m;
        // Đọc từng trường cơ bản: username, passwordHash
        fin >> u.username
            >> u.passwordHash;
        fin >> ws;                                 // Bỏ qua ký tự trắng dư (nếu có)

        // Đọc fullName (có thể chứa dấu cách, nằm trong dấu "")
        if (fin.peek() == '"') {
            fin.get();                             // Bỏ dấu "
            getline(fin, u.fullName, '"');         // Đọc hết tên đến dấu " đóng
        }
        else {
            fin >> u.fullName;                     // Nếu không có dấu ", chỉ lấy đến dấu trắng tiếp theo
        }

        // Đọc các trường tiếp theo: isAdmin, isAutoGenerated, wallet.id, balance, poolBalance
        fin >> u.isAdmin
            >> u.isAutoGenerated
            >> u.wallet.id
            >> u.wallet.balance
            >> u.wallet.poolBalance;

        string otp, pendingFullNameTemp, pendingPasswordHash;
        fin >> otp;                               // Đọc trường otp (có thể rỗng, sẽ để "0")
        fin >> ws;
        // Đọc pendingFullName (có thể chứa dấu cách, nằm trong dấu "")
        if (fin.peek() == '"') {
            fin.get();
            getline(fin, pendingFullNameTemp, '"');
        }
        else {
            fin >> pendingFullNameTemp;
        }
        fin >> pendingPasswordHash;               // Đọc pendingPasswordHash (có thể "0" nếu rỗng)

        // Nếu trường = "0" thì xem như rỗng (chưa có OTP, pendingName, pendingPwd)
        u.otp = (otp == "0" ? "" : otp);
        u.pendingFullName = (pendingFullNameTemp == "0" ? "" : pendingFullNameTemp);
        u.pendingPasswordHash = (pendingPasswordHash == "0" ? "" : pendingPasswordHash);

        // Đọc số lượng giao dịch của user
        fin >> m;
        u.wallet.history.reserve(m);
        for (size_t j = 0; j < m; ++j) {
            Transaction tx;
            fin >> tx.fromWallet >> tx.toWallet >> tx.amount >> tx.fromPool >> tx.timestamp;
            u.wallet.history.push_back(tx);        // Thêm giao dịch vào vector history
        }
        users.push_back(move(u));                  // Thêm user đã đọc vào danh sách users
    }
    return users;                                 // Trả về vector chứa toàn bộ users đã đọc được
}

// -----------------------------------------
// Ghi toàn bộ danh sách user ra file
// -----------------------------------------
// Ghi từng trường; trường chuỗi rỗng sẽ ghi "0" hoặc "" tuỳ loại để tiện xử lý khi đọc lại
void saveUsers(const vector<User>& users) {
    ofstream fout(DATA_FILE);                       // Mở file users.dat để ghi (ghi đè)
    fout << users.size() << '\n';                   // Ghi số lượng user đầu file
    for (auto& u : users) {
        // Ghi lần lượt các trường, trường chuỗi rỗng ghi "0" hoặc ""
        fout << u.username << " "
            << u.passwordHash << " "
            << "\"" << u.fullName << "\"" << " "
            << u.isAdmin << " "
            << u.isAutoGenerated << " "
            << u.wallet.id << " "
            << u.wallet.balance << " "
            << u.wallet.poolBalance << " "
            << (u.otp.empty() ? "0" : u.otp) << " "
            << "\"" << (u.pendingFullName.empty() ? "" : u.pendingFullName) << "\"" << " "
            << (u.pendingPasswordHash.empty() ? "0" : u.pendingPasswordHash) << "\n";
        fout << u.wallet.history.size() << '\n';    // Ghi số lượng giao dịch
        for (auto& tx : u.wallet.history)
            fout << tx.fromWallet << ' '
            << tx.toWallet << ' '
            << tx.amount << ' '
            << (tx.fromPool ? 1 : 0) << ' '
            << tx.timestamp << '\n';
    }
}

// -----------------------------------------
// Tạo file "pending_change.txt" nếu chưa có
// -----------------------------------------
// Dùng chế độ append để không xóa nội dung cũ, chỉ tạo mới file nếu nó chưa tồn tại
void initPendingChangeFile() {
    ofstream fout("pending_change.txt", ios::app);
    fout.close();
}
