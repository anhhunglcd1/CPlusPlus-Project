#pragma once
#pragma once
#ifndef LOGIN_SYSTEM_H
#define LOGIN_SYSTEM_H

#include <string>
#include <vector>
#include <ctime>
using namespace std;

struct Transaction {
    string fromWallet;
    string toWallet;
    int amount = 0;
    time_t timestamp = 0;
};

struct Wallet {
    string id;
    int balance = 0;
    vector<Transaction> history;
};

struct User {
    string username;
    size_t passwordHash = 0;
    string fullName;
    bool isAdmin = false;
    bool isAutoGenerated = false;
    Wallet wallet;
    string otp;                // OTP xác nhận pending change
    string pendingFullName;    // Đổi tên cần xác nhận
    string pendingPasswordHash;// Đổi pass cần xác nhận
};

string genRandomPassword(int length = 8);
string genOTP(int digits = 6);
size_t hashPassword(const string& pwd);
string nowToString(time_t t);
string inputHiddenPassword();

void backupData();
vector<User> loadUsers();
void saveUsers(const vector<User>& users);
void initPendingChangeFile();

User* findUser(vector<User>& users, const string& username);
bool registerUser(vector<User>& users, bool byAdmin = false);
bool deleteUser(vector<User>& users, const string& username);
bool requireOTP(const string& username);
User* login(vector<User>& users);
void scheduleFullNameChange(User* u, vector<User>& users);
void schedulePasswordChange(User* u, vector<User>& users);
void changePassword(User* u, vector<User>& users);
void viewProfile(User* u);
void updateFullName(User* u, vector<User>& users);
void viewHistory(User* u);
void transferPoints(User* u, vector<User>& users);
void userMenu(User* u, vector<User>& users);
void adminMenu(User* u, vector<User>& users);
void clearScreen();

void logPendingChange(const std::string& username, const std::string& otp, const std::string& type);
void removePendingChange(const std::string& username, const std::string& otp);

#endif // LOGIN_SYSTEM_H
