//Dùng để ngăn không cho một file header bị include(chèn) nhiều lần
#pragma once
//Dành cho bản cũ
#ifndef LOGIN_SYSTEM_H
#define LOGIN_SYSTEM_H

#include <string>
#include <vector>
#include <ctime>  // Dùng để làm việc với thời gian
using namespace std;

// ======== Định nghĩa cấu trúc dữ liệu ========

// Giao dịch chuyển điểm giữa các ví
struct Transaction {
    string fromWallet;  // ID ví người gửi
    string toWallet;    // ID ví người nhận
    int amount = 0;         // Số điểm chuyển
    time_t timestamp = 0;   // Thời gian thực hiện giao dịch
};

// Ví chứa điểm và lịch sử giao dịch
struct Wallet {
    string id;                 // Mã định danh ví (ví dụ: WAL123456789)
    int balance = 0;           // Số điểm hiện có trong ví
    vector<Transaction> history; // Danh sách các giao dịch liên quan đến ví
};

// Thông tin người dùng
struct User {
    string username;           // Tên đăng nhập
    size_t passwordHash = 0;   // Hash mật khẩu
    string fullName;           // Tên đầy đủ của người dùng
    bool isAdmin = false;      // Cờ xác định quyền admin
    bool isAutoGenerated = false; // Cờ nếu mật khẩu do hệ thống tự sinh
    Wallet wallet;             // Ví điểm của người dùng
};

// ==== Khai báo các hàm hỗ trợ ==== 

// Sinh mật khẩu ngẫu nhiên (mặc định 8 ký tự)
string genRandomPassword(int length = 8);

// Sinh mã OTP gồm số (mặc định 6 chữ số)
string genOTP(int digits = 6);

// Hàm băm (hash) mật khẩu
size_t hashPassword(const string& pwd);

// Chuyển đổi thời gian (time_t) sang chuỗi để hiển thị
string nowToString(time_t t);

// Nhập mật khẩu mà không hiển thị ký tự (hiển thị dấu * hoặc không hiển thị)
string inputHiddenPassword();

// Sao lưu dữ liệu người dùng ra file
void backupData();

// Tải danh sách người dùng từ file vào vector
vector<User> loadUsers();

// Lưu danh sách người dùng từ vector ra file
void saveUsers(const vector<User>& users);

// Tìm người dùng theo username trong vector, trả về con trỏ hoặc nullptr
User* findUser(vector<User>& users, const string& username);

// Đăng ký người dùng mới. Nếu byAdmin = true, admin có thể khai báo thêm quyền.
bool registerUser(vector<User>& users, bool byAdmin = false);

// Đăng ký tài khoản admin (chỉ admin có quyền gọi)
bool registerAdmin(vector<User>& users);

// Xóa người dùng theo username
bool deleteUser(vector<User>& users, const string& username);

// Hàm đăng nhập, trả về con trỏ đến User nếu thành công, ngược lại nullptr
User* login(vector<User>& users);

// Yêu cầu nhập OTP để xác thực hai lớp
bool requireOTP(const string& username);

// Thay đổi mật khẩu cho user và cập nhật dữ liệu
void changePassword(User* u, vector<User>& users);

// Hiển thị thông tin hồ sơ người dùng
void viewProfile(User* u);

// Cập nhật tên đầy đủ cho user và lưu dữ liệu
void updateFullName(User* u, vector<User>& users);

// Xem lịch sử giao dịch của user
void viewHistory(User* u);

// Chuyển điểm (transfer points) giữa các ví người dùng
void transferPoints(User* u, vector<User>& users);

// Hiển thị menu cho user thường
void userMenu(User* u, vector<User>& users);

// Hiển thị menu cho admin
void adminMenu(User* u, vector<User>& users);

// Xóa nội dung console (cross-platform)
void clearScreen();

#endif // LOGIN_SYSTEM_H
