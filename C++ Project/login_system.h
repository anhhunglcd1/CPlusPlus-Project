#pragma once
#ifndef LOGIN_SYSTEM_H
#define LOGIN_SYSTEM_H

#include <string>
#include <vector>
#include <ctime>

using namespace std;

struct Transaction
{
	string fromWallet, toWallet;
	int amount;
	time_t timestamp;
};

struct Wallet
{
	string id;
	int balance;
	vector<Transaction> history;
};

struct User
{
	string username;
	size_t passwordHash;
	string fullName;
	bool isAdmin;
	bool isAutoGenerated;
	Wallet wallet;
};

//===Prototypes===
//utility
string genRamdomPassword(int length = 8);
string genOTP(int digits = 6);
size_t hashPassword(const string& pwd);
string nowToString(time_t t);

//file I/O
void backupData();
vector<User> loadUsers();
void saveUsers(const vector<User>& users);

//auth
User* findUser(vector<User>& users, const string& username);
bool registerUser(vector<User>& users, bool byAdmin = false);
User* login(vector<User>& users);
bool requireOTP(const string& username);


//user operations
void changePassword(User* u, vector<User>& users);
void viewProfile(User* u);
void updateFullName(User* u, vector<User>& users);
void viewHistory(User* u);
void transferPoints(User* u, vector<User>& users);

//menus
void userMenu(User* u, vector<User>& users);
void adminMenu(User* u, vector<User>& users);

#endif // !LOGIN_SYSTEM_H


