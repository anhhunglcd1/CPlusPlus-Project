#include "login_system.h"
#include <iostream>
#include <limits>
#include <fstream>
#include <sstream>
#include <string>
using namespace std;

User* findUser(vector<User>& users, const string& username) {
    for (auto& u : users)
        if (u.username == username) return &u;
    return nullptr;
}

bool registerUser(vector<User>& users, bool byAdmin) {
    string username, fullName, pwd;
    cout << "Username: ";
    cin >> username;
    if (findUser(users, username)) {
        cout << "Username already exists.\n";
        return false;
    }
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Full name: ";
    getline(cin, fullName);
    cout << "Password (leave blank to auto-generate): ";
    pwd = inputHiddenPassword();
    bool autoGen = false;
    if (pwd.empty()) {
        pwd = genRandomPassword();
        autoGen = true;
        cout << "Generated password: " << pwd << "\n";
    }
    User u;
    u.username = username;
    u.passwordHash = hashPassword(pwd);
    u.fullName = fullName;
    u.isAdmin = byAdmin;
    u.isAutoGenerated = autoGen;
    u.wallet.id = string("WAL") + to_string(time(nullptr));
    u.wallet.balance = 0;
    u.otp = "";
    u.pendingFullName = "";
    u.pendingPasswordHash = "";
    users.push_back(u);
    saveUsers(users);
    cout << "Registration successful.\n";
    return true;
}

bool deleteUser(vector<User>& users, const string& username) {
    for (auto it = users.begin(); it != users.end(); ++it) {
        if (it->username == username) {
            users.erase(it);
            saveUsers(users);
            return true;
        }
    }
    return false;
}

bool requireOTP(const string& username) {
    string otp = genOTP();
    cout << "[OTP for " << username << ": " << otp << "]\n";
    cout << "Enter OTP: ";
    string in; cin >> in;
    if (in != otp) {
        cout << "Invalid OTP.\n";
        return false;
    }
    return true;
}

// Xóa block OTP đã xác nhận thành công khỏi file
void removePendingChange(const std::string& username, const std::string& otp) {
    std::ifstream fin("pending_change.txt");
    if (!fin) return;
    std::ostringstream oss;
    std::string line, block;
    bool found = false, inBlock = false;

    while (std::getline(fin, line)) {
        if (line.find("Username: ") == 0) {
            if (!block.empty() && !found) oss << block;
            block.clear();
            found = false;
            inBlock = false;
        }
        block += line + "\n";
        if (line == "Username: " + username) inBlock = true;
        if (inBlock && line == "OTP: " + otp) found = true;
        if (line == "-----------") {
            if (!found) oss << block;
            block.clear();
            found = false;
            inBlock = false;
        }
    }
    if (!block.empty() && !found) oss << block;
    fin.close();

    std::ofstream fout("pending_change.txt", std::ios::trunc);
    fout << oss.str();
    fout.close();
}

User* login(vector<User>& users) {
    string username;
    cout << "Username: ";
    getline(cin, username);
    if (username.empty()) getline(cin, username);
    User* u = findUser(users, username);
    if (!u) { cout << "User not found.\n"; return nullptr; }

    // CHỈ USER THƯỜNG và có pending change mới bị bắt nhập OTP
    if (!u->isAdmin && !u->otp.empty() &&
        (!u->pendingFullName.empty() || !u->pendingPasswordHash.empty())) {

        cout << "Pending update detected!\n";
        // --- Hiển thị nội dung sẽ thay đổi ---
        if (!u->pendingFullName.empty()) {
            cout << "- Your full name will be changed to: " << u->pendingFullName << endl;
        }
        if (!u->pendingPasswordHash.empty()) {
            cout << "- Your password will be changed (new password set by admin)" << endl;
        }
        cout << "Your OTP is: " << u->otp << endl;
        cout << "Enter OTP to confirm these changes: ";
        string in; cin >> in;
        if (in == u->otp) {
            if (!u->pendingFullName.empty()) {
                u->fullName = u->pendingFullName;
                u->pendingFullName.clear();
            }
            if (!u->pendingPasswordHash.empty()) {
                u->passwordHash = stoull(u->pendingPasswordHash);
                u->pendingPasswordHash.clear();
            }
            removePendingChange(u->username, u->otp);
            u->otp.clear();
            saveUsers(users);
            cout << "Changes applied. Please login again.\n";
        }
        else {
            cout << "Invalid OTP. Changes not applied.\n";
        }
        return nullptr;
    }

    // Đăng nhập bình thường...
    cout << "Password: ";
    string pwd = inputHiddenPassword();
    if (u->passwordHash != hashPassword(pwd)) {
        cout << "Login failed.\n";
        return nullptr;
    }
    if (u->isAutoGenerated) {
        cout << "\nYour password was auto-generated. You must change it now.\n";
        while (true) {
            cout << "New password: "; string np = inputHiddenPassword();
            cout << "Confirm: "; string cp = inputHiddenPassword();
            if (np != cp) cout << "Passwords do not match. Try again.\n";
            else if (np.empty()) cout << "Password cannot be empty.\n";
            else { u->passwordHash = hashPassword(np); u->isAutoGenerated = false; saveUsers(users); cout << "Password changed successfully.\n"; break; }
        }
    }
    cout << "Welcome, " << u->fullName << (u->isAdmin ? " (Admin)" : "") << "!\n";
    return u;
}
