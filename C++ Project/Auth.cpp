#include "login_system.h"
#include <iostream>
#include <limits>    // Dùng numeric_limits để xử lý buffer input
#include <algorithm> // Dùng find_if tìm iterator
using namespace std;

// ===== Hàm tìm kiếm người dùng =====
// Tìm User dựa trên username trong danh sách users
// Trả về con trỏ đến User nếu tìm thấy, ngược lại trả về nullptr
User* findUser(vector<User>& users, const string& username) {
    for (auto& u : users) {
        if (u.username == username) {
            return &u;  // Trả về địa chỉ của User trong vector
        }
    }
    return nullptr;    // Không tìm thấy
}

// ===== Đăng ký người dùng mới =====
// Nếu byAdmin = true thì tài khoản sẽ có quyền Admin
bool registerUser(vector<User>& users, bool byAdmin) {
    string username, fullName, pwd;

    // Nhập và kiểm tra username
    cout << "Username: ";
    cin >> username;
    if (findUser(users, username)) {
        cout << "Username already exists.\n";
        return false;
    }
    // Xóa newline còn sót lại trước khi dùng getline
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    // Nhập họ tên đầy đủ
    cout << "Full name: ";
    getline(cin, fullName);

    // Nhập mật khẩu (ẩn ký tự)
    cout << "Password (leave blank to auto-generate): ";
    pwd = inputHiddenPassword();

    bool autoGen = false;
    // Nếu để trống, tự sinh mật khẩu và gắn cờ
    if (pwd.empty()) {
        pwd = genRandomPassword();
        autoGen = true;
        cout << "Generated password: " << pwd << "\n";
    }

    // Khởi tạo đối tượng User
    User u;
    u.username = username;
    u.passwordHash = hashPassword(pwd);  // Lưu hash mật khẩu
    u.fullName = fullName;
    u.isAdmin = byAdmin;
    u.isAutoGenerated = autoGen;
    // Tạo ví với ID duy nhất dựa trên timestamp
    u.wallet.id = string("WAL") + to_string(time(nullptr));
    u.wallet.balance = 0;

    // Thêm user vào danh sách và lưu xuống file
    users.push_back(u);
    saveUsers(users);
    cout << "Registration successful.\n";
    return true;
}

// ===== Đăng ký Admin =====
bool registerAdmin(vector<User>& users) {
    cout << "\n--- Create a new Admin Account ---\n";
    bool ok = registerUser(users, true);
    if (ok) cout << "Admin account created.\n";
    return ok;
}

// ===== Xóa người dùng =====
// Trả về false nếu không tìm thấy
bool deleteUser(vector<User>& users, const string& username) {
    auto it = find_if(users.begin(), users.end(),
        [&](const User& u) { return u.username == username; });
    if (it == users.end()) {
        return false;  // Không tìm thấy username để xóa
    }

    users.erase(it);    // Xóa khỏi vector
    saveUsers(users);   // Lưu cập nhật xuống file
    cout << "User '" << username << "' deleted.\n";
    return true;
}

// ===== Đăng nhập và bắt buộc đổi mật khẩu auto-generated =====
User* login(vector<User>& users) {
    string username, pwd;

    // Nhập thông tin đăng nhập
    cout << "Username: ";
    cin >> username;
    // Xóa newline trước khi nhập mật khẩu ẩn
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Password: ";
    pwd = inputHiddenPassword();

    // Tìm user và kiểm tra hash mật khẩu
    User* u = findUser(users, username);
    if (!u || u->passwordHash != hashPassword(pwd)) {
        cout << "Login failed.\n";
        return nullptr;
    }

    // Nếu mật khẩu do hệ thống sinh, bắt buộc đổi ngay
    if (u->isAutoGenerated) {
        cout << "\nYour password was auto-generated. You must change it now.\n";
        while (true) {
            cout << "New password: ";
            string newPass1 = inputHiddenPassword();
            cout << "Confirm password: ";
            string newPass2 = inputHiddenPassword();

            if (newPass1 != newPass2) {
                // Hai lần nhập không trùng
                cout << "Passwords do not match. Try again.\n";
            }
            else if (newPass1.empty()) {
                // Mật khẩu mới không được để trống
                cout << "Password cannot be empty.\n";
            }
            else {
                // Cập nhật mật khẩu mới
                u->passwordHash = hashPassword(newPass1);
                u->isAutoGenerated = false;
                saveUsers(users);
                cout << "Password changed successfully.\n";
                break;
            }
        }
    }

    // Hiển thị thông báo chào mừng
    cout << "Welcome, " << u->fullName
        << (u->isAdmin ? " (Admin)" : "") << "!\n";
    return u;
}

// ===== Xác thực hai lớp với OTP =====
bool requireOTP(const string& username) {
    string otp = genOTP();
    cout << "[OTP sent to " << username << ": " << otp << "]\n";
    cout << "Enter OTP: ";
    string in;
    cin >> in;
    if (in != otp) {
        cout << "Invalid OTP.\n";
        return false;
    }
    return true;
}
