#include "login_system.h"
#include <iostream>
#include <limits>
#include <algorithm>
using namespace std;

User* findUser(vector<User>& users, const string& username) {
    for (auto& u : users)
        if (u.username == username)
            return &u;
    return nullptr;
}

bool registerUser(vector<User>& users, bool byAdmin) {
    string username, fullName, pwd;
    cout << "Username: ";
    cin >> username;
    if (findUser(users, username)) {
        cout << "Username already exists.\n";
        return false;
    }
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    cout << "Full name: ";
    getline(cin, fullName);

    cout << "Password (leave blank to auto-generate): ";
    pwd = inputHiddenPassword();

    bool autoGen = false;
    if (pwd.empty()) {
        pwd = genRandomPassword();
        autoGen = true;
        cout << "Generated password: " << pwd << "\n";
    }

    User u;
    u.username = username;
    u.passwordHash = hashPassword(pwd);
    u.fullName = fullName;
    u.isAdmin = byAdmin;
    u.isAutoGenerated = autoGen;
    u.wallet.id = "WAL" + to_string(time(nullptr));  // chỉ timestamp
    u.wallet.balance = 0;

    users.push_back(u);
    saveUsers(users);
    cout << "Registration successful.\n";
    return true;
}

bool registerAdmin(vector<User>& users) {
    cout << "\n--- Create a new Admin Account ---\n";
    bool ok = registerUser(users, true);
    if (ok) cout << "Admin account created.\n";
    return ok;
}

bool deleteUser(vector<User>& users, const string& username) {
    auto it = find_if(users.begin(), users.end(),
        [&](const User& u) { return u.username == username; });
    if (it == users.end()) return false;
    users.erase(it);
    saveUsers(users);
    return true;
}

User* login(vector<User>& users) {
    string username, pwd;
    cout << "Username: ";
    cin >> username;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Password: ";
    pwd = inputHiddenPassword();

    User* u = findUser(users, username);
    if (!u || u->passwordHash != hashPassword(pwd)) {
        cout << "Login failed.\n";
        return nullptr;
    }
    if (u->isAutoGenerated)
        cout << "Please change your password now.\n";

    cout << "Welcome, " << u->fullName
        << (u->isAdmin ? " (Admin)" : "") << "!\n";
    return u;
}

bool requireOTP(const string& username) {
    string otp = genOTP();
    cout << "[OTP sent to " << username << ": " << otp << "]\n";
    cout << "Enter OTP: ";
    string in;
    cin >> in;
    if (in != otp) {
        cout << "Invalid OTP.\n";
        return false;
    }
    return true;
}
