#include "login_system.h"
#include <iostream>
#include <limits>
using namespace std;

// Admin schedules a full name change
void scheduleFullNameChange(User* u, vector<User>& users) {
    cout << "Enter new full name: ";
    string nm; getline(cin, nm);
    u->pendingFullName = nm;
    u->otp = genOTP();
    saveUsers(users);
    cout << "OTP generated: " << u->otp << "\nUser must enter this OTP at next login.\n";
}

// Admin schedules a password change
void schedulePasswordChange(User* u, vector<User>& users) {
    cout << "Enter new password: ";
    string np = inputHiddenPassword();
    u->pendingPasswordHash = to_string(hashPassword(np));
    u->otp = genOTP();
    saveUsers(users);
    cout << "OTP generated: " << u->otp << "\nUser must enter this OTP at next login.\n";
}

// User changes their password
void changePassword(User* u, vector<User>& users) {
    if (!requireOTP(u->username)) return;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "New password: ";
    string np = inputHiddenPassword();
    u->passwordHash = hashPassword(np);
    u->isAutoGenerated = false;
    saveUsers(users);
    cout << "Password changed successfully.\n";
}

// User updates their full name
void updateFullName(User* u, vector<User>& users) {
    if (!requireOTP(u->username)) return;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "New full name: ";
    string nm; getline(cin, nm);
    u->fullName = nm;
    saveUsers(users);
    cout << "Full name updated successfully.\n";
}

// User profile
void viewProfile(User* u) {
    cout << "--- Profile ---\n"
        << "Username   : " << u->username << "\n"
        << "Full name  : " << u->fullName << "\n"
        << "Wallet ID  : " << u->wallet.id << "\n"
        << "Balance    : " << (u->isAdmin ? "Unlimited" : to_string(u->wallet.balance)) << "\n";
}

// Transaction history
void viewHistory(User* u) {
    cout << "--- Transaction History ---\n";
    for (auto& tx : u->wallet.history) {
        cout << nowToString(tx.timestamp) << " | "
            << tx.fromWallet << " -> " << tx.toWallet << " : " << tx.amount << "\n";
    }
}

// Transfer points between users
void transferPoints(User* u, vector<User>& users) {
    cout << "Destination wallet ID: ";
    string dest; cin >> dest;
    User* v = nullptr;
    for (auto& x : users)
        if (x.wallet.id == dest) v = &x;
    if (!v) { cout << "Wallet not found.\n"; return; }
    cout << "Amount to transfer: ";
    int amt; cin >> amt;
    if (!u->isAdmin && u->wallet.balance < amt) { cout << "Insufficient balance.\n"; return; }
    if (!requireOTP(u->username)) return;
    if (!u->isAdmin) u->wallet.balance -= amt;
    v->wallet.balance += amt;
    Transaction tx{ u->wallet.id, v->wallet.id, amt, time(nullptr) };
    u->wallet.history.push_back(tx);
    v->wallet.history.push_back(tx);
    saveUsers(users);
    cout << "Transfer successful.\n";
}
