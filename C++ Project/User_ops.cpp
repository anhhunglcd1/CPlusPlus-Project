#include "login_system.h"
#include <iostream>
#include <limits>    // Dùng numeric_limits để xử lý buffer input
using namespace std;

// ===== Đổi mật khẩu =====
void changePassword(User* u, vector<User>& users) {
    // Yêu cầu OTP xác thực trước khi đổi mật khẩu
    if (!requireOTP(u->username)) return;
    // Xóa newline còn sót để chuẩn bị nhập password mới
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "New password: ";
    string np = inputHiddenPassword();
    // Cập nhật hash và cờ auto-generated
    u->passwordHash = hashPassword(np);
    u->isAutoGenerated = false;
    saveUsers(users);  // Lưu thay đổi xuống file
    cout << "Password changed successfully.\n";
}

// ===== Xem thông tin cá nhân =====
void viewProfile(User* u) {
    cout << "\n--- Profile ---\n"
        << "Username   : " << u->username << "\n"
        << "Full name  : " << u->fullName << "\n"
        << "Wallet ID  : " << u->wallet.id << "\n"
        << "Balance    : "
        << (u->isAdmin ? "Unlimited" : to_string(u->wallet.balance))
        << "\n";
}

// ===== Cập nhật họ tên =====
void updateFullName(User* u, vector<User>& users) {
    // Yêu cầu OTP xác thực
    if (!requireOTP(u->username)) return;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "New full name: ";
    string nm;
    getline(cin, nm);
    u->fullName = nm;
    saveUsers(users);  // Lưu thay đổi
    cout << "Name updated successfully.\n";
}

// ===== Xem lịch sử giao dịch =====
void viewHistory(User* u) {
    cout << "\n--- Transaction History ---\n";
    for (const auto& tx : u->wallet.history) {
        cout << nowToString(tx.timestamp)
            << " | " << tx.fromWallet
            << " -> " << tx.toWallet
            << " : " << tx.amount << "\n";
    }
}

// ===== Chuyển điểm giữa các ví =====
void transferPoints(User* u, vector<User>& users) {
    cout << "Destination wallet ID: ";
    string destWalletId;
    cin >> destWalletId;

    // Tìm User sở hữu ví đích
    User* v = nullptr;
    for (auto& x : users) {
        if (x.wallet.id == destWalletId) {
            v = &x;
            break;
        }
    }
    if (!v) {
        cout << "Wallet not found.\n";
        return;
    }

    cout << "Amount to transfer: ";
    int amt;
    cin >> amt;

    // Kiểm tra số dư (với Users không phải Admin)
    if (!u->isAdmin && u->wallet.balance < amt) {
        cout << "Insufficient balance.\n";
        return;
    }
    // Yêu cầu OTP xác thực trước khi chuyển
    if (!requireOTP(u->username)) return;

    // Trừ/gán số dư
    if (!u->isAdmin)
        u->wallet.balance -= amt;
    v->wallet.balance += amt;

    // Tạo bản ghi Transaction và lưu lịch sử cho cả hai
    Transaction tx{ u->wallet.id, v->wallet.id, amt, time(nullptr) };
    u->wallet.history.push_back(tx);
    v->wallet.history.push_back(tx);
    saveUsers(users);  // Lưu thay đổi
    cout << "Transfer successful.\n";
}
